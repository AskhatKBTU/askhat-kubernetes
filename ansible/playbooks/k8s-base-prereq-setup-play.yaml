- name: 'This will setup and initialize new K8s cluster and setup controlplane node'
  hosts: k8s_test_all_nodes
  become: true
  tasks:
    - name: Command swap off
      command: "{{ item }}"
      with_items:
        - sudo sed -i '/swap/d' /etc/fstab
        - sudo swapoff -a
        - sudo setenforce 0
        - sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config       

    - name: Install base packages
      ansible.builtin.yum:
        name:
         - firewalld
         - wget
         - yum-utils
         - device-mapper-persistent-data
         - lvm2
        state: present

    - name: Turn on firewalld
      command: sudo systemctl enable firewalld --now

    - name: Set firewall rules
      command: "{{ item }}"
      with_items:
      - firewall-cmd --permanent --add-port=6443/tcp
      - firewall-cmd --permanent --add-port=179/tcp
      - firewall-cmd --permanent --add-port=2379-2380/tcp
      - firewall-cmd --permanent --add-port=10250/tcp
      - firewall-cmd --permanent --add-port=10251/tcp
      - firewall-cmd --permanent --add-port=10252/tcp
      - firewall-cmd --permanent --add-port=10255/tcp
      - firewall-cmd --permanent --add-port=10257/tcp
      - firewall-cmd --permanent --add-port=10259/tcp
      - firewall-cmd --permanent --add-port=8472/udp
      - firewall-cmd --permanent --add-port=53/udp
      - firewall-cmd --permanent --add-port=53/tcp
      - firewall-cmd --permanent --add-port=22/tcp
      - firewall-cmd --permanent --add-port=123/tcp
      - firewall-cmd --permanent --add-port=67-68/tcp
      - firewall-cmd --permanent --add-port=30000-32767/tcp
      - firewall-cmd --permanent --add-port=389/tcp
      - firewall-cmd --permanent --add-port=636/tcp      
      - firewall-cmd --add-masquerade --permanent
      - sudo systemctl restart firewalld


    - name: Create k8s.conf in modules 
      ansible.builtin.file:
        path: /etc/modules-load.d/k8s.conf
        state: touch
        owner: root
        group: root
        mode: '0760'

    - name: Update ip forwarding rules 
      ansible.builtin.blockinfile:
       path: /etc/modules-load.d/k8s.conf
       block: |
        overlay
        br_netfilter

    - name: Create k8s.conf in sysctl
      ansible.builtin.file:
        path: /etc/sysctl.d/k8s.conf
        state: touch
        owner: root
        group: root
        mode: '0760'

    - name: Update modules in k8s.conf
      ansible.builtin.blockinfile:
       path: /etc/sysctl.d/k8s.conf
       block: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1

    - name: Activate modeprobe overlay
      command: sudo modprobe overlay

    - name: Activate bridge netfilter
      command: sudo modprobe br_netfilter
    
    - name: Apply system configurations 
      command: sudo sysctl --system

    - name: Enable IP forwarding
      command: "{{ item }}"
      with_items:
      - sudo iptables -P INPUT ACCEPT
      - sudo iptables -P FORWARD ACCEPT
      - sudo iptables -P OUTPUT ACCEPT
      - sudo iptables -F
   
    - name: Download file from a file path
      ansible.builtin.get_url:
        url:  https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64
        dest: /tmp/runc.amd64   
    
    - name: Install runc 
      command: sudo install -m 755 /tmp/runc.amd64 /usr/local/sbin/runc
    
    - name: Download file from a file path for cni plugins
      ansible.builtin.get_url:
        url:  https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
        dest: /tmp/cni-plugins-linux-amd64-v1.1.1.tgz  
    
    - name: Disable firewalld
      command: sudo systemctl disable firewalld --now


    - name: Create directory for CNI pluging
      command: sudo mkdir -p /opt/cni/bin 
    
    - name: Install CNI plugins
      command: sudo tar Cxzvf /opt/cni/bin /tmp/cni-plugins-linux-amd64-v1.1.1.tgz
    
    - name: Install Containerd
      block:
        - name: Add Docker repository
          yum_repository:
            name: Docker
            description: Docker Repository
            baseurl: https://download.docker.com/linux/centos/7/$basearch/stable
            gpgcheck: yes
            gpgkey: https://download.docker.com/linux/centos/gpg

        - name: Update all packages
          yum:
            name: '*'
            state: latest

        - name: Install containerd.io
          yum:
            name: containerd.io
            state: present

        - name: Create containerd configuration directory
          file:
            path: /etc/containerd
            state: directory

        - name: Generate containerd configuration file
          shell: containerd config default | tee /etc/containerd/config.toml
          args:
            creates: /etc/containerd/config.toml

        - name: Enable and start containerd
          systemd:
            name: containerd
            enabled: yes
            state: started
            daemon_reload: yes

        - name: Install bash-completion
          yum:
            name: bash-completion
            state: present
            disable_excludes: kubernetes
    
    - name: Create kubernetes conf 
      command: touch /etc/yum.repos.d/kubernetes.repo
    
    - name: add Kubernetes YUM repository
      yum_repository:
        name: Kubernetes
        description: Kubernetes YUM repository
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        gpgcheck: yes

    - name: Install kubelet
      yum:
        name: kubelet-1.28.2
        state: present
        update_cache: true

    - name: Install kubeadm
      yum:
        name: kubeadm-1.28.2
        state: present

    - name: start kubelet
      service:
       name: kubelet
       enabled: yes
       state: started
    
    - name: Install kubectl
      yum:
        name: kubectl-1.28.2
        state: present
        allow_downgrade: yes

    - name: Enable kublet and bash-completion tool
      command: "{{ item }}"
      with_items:
      - sudo yum install -y bash-completion --disableexcludes=kubernetes
      - echo 'source <(kubectl completion bash)' >> ~/.bashrc
      - echo 'alias k=kubectl' >> ~/.bashrc
      - echo 'complete -o default -F __start_kubectl k' >> ~/.bashrc
      - echo 'export KUBECONFIG=$HOME/.kube/config' >> $HOME/.bashrc
      - echo 'KUBELET_EXTRA_ARGS="--fail-swap-on=false"' > /etc/sysconfig/kubelet
      - sudo systemctl enable --now kubelet
      - sudo rm /etc/containerd/config.toml
      - sudo systemctl restart containerd
