#!/bin/bash
#
# This script automates the deployment of Kubernetes control plane node (MASTER) on RHEL 8
# v 1.0  - run with root privileges
# Author: Askhat Seitenov 

#Declare your variables below
KUBEADM_VERSION="kubeadm-1.21.0" 
KUBELET_VERSION="kubelet-1.21.0" 
KUBECTL_VERSION="kubectl-1.21.0" 
MASTER_PRIVATE_IP="172.29.109.95" 
POD_NET_CIDR="192.168.0.0/16" 
CALICO_VERSION="v3.24.1" 

#######################################
# Print a message in a given color
# Arguments:
#   Color. eg: green, red
#######################################
function print_color() {
  NC="\033[0m"
  case $1 in
    "green") COLOR="\033[0;32m" ;;
    "red") COLOR="\033[0;31m" ;;
    "*") COLOR="\033[0m" ;;
  esac
  echo -e "${COLOR} $2 ${NC}"
}

#######################################
# To let error messages go in STDERR
# Arguments:
#   No arguments needed
#######################################
function err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
}


#######################################
# Check the status of a given service. Error and exit if not active.
# Arguments:
#   Service. eg: firewalld, containerd
#######################################
function check_service_status() {
    is_service_active=$(sudo systemctl is-active "$1")
    if [[ $is_service_active -eq "active" ]]; then
        print_color "green" "$1 Service is ACTIVE..."
    else
        print_color "red" "$1 Service is NOT ACTIVE!!!"
        err "$1 service is not active"
        exit 1
    fi
}

#--- Pre-flight Configs and firewalld setup Control Plane ---
#------------------------------------------------------------
#Swap memory must be turned off permanently (delete it from fstab file)
print_color "green" "Turning off SWAP for Kubernetes INIT"
sudo sed -i '/swap/d' /etc/fstab
sudo swapoff -a


#Set SELinux in permissive mode (effectively disabling it)
print_color "green" "Disabling SELinux and setting it in permissive mode.  - Required for Kubernetes INIT"
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

#Install and set firewall for control plane
print_color "green" "Installing and checking firewalld status - control plane node..."
sudo yum install -y firewalld 
sudo systemctl enable firewalld --now
check_service_status firewalld

#Opening required ports for controlplane
print_color "green" "Opening required ports for controlplane"
firewall-cmd --permanent --add-port=6443/tcp
firewall-cmd --permanent --add-port=179/tcp
firewall-cmd --permanent --add-port=2379-2380/tcp
firewall-cmd --permanent --add-port=10250/tcp
firewall-cmd --permanent --add-port=10251/tcp
firewall-cmd --permanent --add-port=10252/tcp
firewall-cmd --permanent --add-port=10255/tcp
firewall-cmd --permanent --add-port=8472/udp
firewall-cmd --permanent --add-port=53/udp
firewall-cmd --permanent --add-port=53/tcp
firewall-cmd --permanent --add-port=22/tcp
firewall-cmd --permanent --add-port=123/tcp
firewall-cmd --permanent --add-port=67-68/tcp
firewall-cmd --add-masquerade --permanent
# only if you want NodePorts exposed on control plane IP as well uncomment below
#firewall-cmd --permanent --add-port=30000-32767/tcp
systemctl restart firewalld

#install wget
sudo dnf install wget -y


#---Setup IP forwarding and Overlay network model---
#---------------------------------------------------
#Activate ip forwarding and overlay network model
print_color "green" "Activating bridge network filter and overlay network model"
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
#Activating plugins
sudo modprobe overlay
sudo modprobe br_netfilter

#Making forwarding persistent across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
#Applying
sudo sysctl --system
#accepting iptables forwarding/input/output and apply updated kube-dns
sudo iptables -P INPUT ACCEPT
sudo iptables -P FORWARD ACCEPT
sudo iptables -P OUTPUT ACCEPT
sudo iptables -F



#------------------------------Installing required packages-----------------------
#----------------------------------------------------------------------------------
print_color "green" "------------------Installing required packages-----------------------"
#Installing runc (choose a version on https://github.com/opencontainers/runc/releases)
sudo wget https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64
sudo install -m 755 runc.amd64 /usr/local/sbin/runc

#Install CNI plugins (choose a release version on https://github.com/containernetworking/plugins/releases)
sudo wget https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
sudo mkdir -p /opt/cni/bin
sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz

#Install required basic Linux packages (yum utils dev mapper and lvm2)
sudo dnf install -y  yum-utils device-mapper-persistent-data lvm2

#Installing, configuring and enabling Container Runtime (CRI) - Containerd.io
sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
sudo dnf update -y 
sudo dnf install -y containerd.io --allowerasing
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml
sudo systemctl enable containerd --now
sudo systemctl daemon-reload
check_service_status containerd

#Setup kubernetes default folder
sudo cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

#Install Kubernetes (kubeadm, kubelet and kubectl)  -to improve with version variable
sudo dnf install -y $KUBEADM_VERSION $KUBELET_VERSION $KUBECTL_VERSION

#Install bash-completion
echo "Installing bash-completion tool"
sudo yum install -y bash-completion --disableexcludes=kubernetes
echo 'source <(kubectl completion bash)' >> ~/.bashrc
echo 'alias k=kubectl' >> ~/.bashrc
echo 'complete -o default -F __start_kubectl k' >> ~/.bashrc



#Enable and start kubelet 
print_color "green" "Enabling KUBELET..."
echo 'KUBELET_EXTRA_ARGS="--fail-swap-on=false"' > /etc/sysconfig/kubelet
sudo systemctl enable --now kubelet


#---Initializing K8s cluster---
#------------------------------

#This value should be specified in future for redundant cluster  --control-plane-endpoint  setup cGroup on ControlPlane
#To choose specific pod net cidr (non-default) add following flag --pod-network-cidr $POD_NET_CIDR
print_color "green" "KUBEADM initialization starting."
print_color "green" "Please define your master node's private ip using --apiserver-advertise-address flag"
sudo kubeadm init --apiserver-advertise-address=$MASTER_PRIVATE_IP

#Setup kube config in a home env
print_color "green" "Setting kube config and assigning it to HOME"
sudo mkdir -p "$HOME"/.kube
sudo cp -i /etc/kubernetes/admin.conf "$HOME"/.kube/config
sudo chown "$(id -u)":"$(id -g)" "$HOME"/.kube/config

#Creating KUBECONFIG environment variable
export KUBECONFIG=/etc/kubernetes/admin.conf
echo 'export KUBECONFIG=$HOME/.kube/config' >> $HOME/.bashrc
#Restart kubelet service on both control plane and worker

print_color "green" "Restarting KUBELET and DAEMONS..."
sudo systemctl restart kubelet
sudo systemctl daemon-reload
check_service_status kubelet

#Check if nodes are connected on control plane (you will see not ready status - it is ok) 
sudo kubectl get nodes

#Setup CALICO CNI - uncomment to manage manually (without HELM)
print_color "green" "Activating Calico - CNI"
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml


#---Installing and activating HELM---
#------------------------------------
print_color "green" "Installation of HELM started"
sudo curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
sudo chmod 700 get_helm.sh
sudo ./get_helm.sh
sudo rm -y get_helm.sh
check_service_status helm


#---Installing CNI with HELM (Calico)---
#---------------------------------------

#More information on https://projectcalico.docs.tigera.io/getting-started/kubernetes/helm
#print_color "green" "Activating Calico - CNI"
#helm repo add projectcalico https://projectcalico.docs.tigera.io/charts
#kubectl create namespace tigera-operator
#helm install calico projectcalico/tigera-operator --version $CALICO_VERSION --namespace tigera-operator
#sudo kubectl get pods -n calico-system



#---Final check---
#-----------------
print_color "green" "If the installation was successful, then you should see all pods as running in 5-10 minutes"
watch kubectl get pods --all-namespaces
#if bash completion is not working try to run 'exec bash'
#exec bash
