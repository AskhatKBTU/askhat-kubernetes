#!/bin/bash
#
# This script will join worker node to your Kubernetes cluster on RHEL 8
# v 1.0  - run with root privileges
# Author: Askhat Seitenov 

#Declare your variables below - make sure versions match 
#replace REPLACE_ME value below join token with yours from here o -> 192.168.60.4:6443 --token t7hxp8.0aa721ota634jm9m \
# --discovery-token-ca-cert-hash sha256:5e744f6168f0d5726fe644805444d45e04df9bf454ce30d0cd40dd1d2070c930 <-- till here

JOIN_TOKEN="REPLACE_ME_JOIN"
KUBEADM_VERSION="kubeadm-1.21.0" 
KUBELET_VERSION="kubelet-1.21.0" 
KUBECTL_VERSION="kubectl-1.21.0"


#######################################
# Print a message in a given color
# Arguments:
#   Color. eg: green, red
#######################################
function print_color() {
  NC="\033[0m"
  case $1 in
    "green") COLOR="\033[0;32m" ;;
    "red") COLOR="\033[0;31m" ;;
    "*") COLOR="\033[0m" ;;
  esac
  echo -e "${COLOR} $2 ${NC}"
}

#######################################
# Check the status of a given service. Error and exit if not active.
# Arguments:
#   Service. eg: firewalld, containerd
#######################################
function check_service_status() {
    is_service_active=$(sudo systemctl is-active "$1")
    if [[ $is_service_active -eq "active" ]]
    then
        print_color "green" "$1 Service is ACTIVE..."
    else
        print_color "red" "$1 Service is NOT ACTIVE!!!"
        exit 1
    fi
}

#--- Pre-flight Configs and firewalld setup Control Plane ---
#------------------------------------------------------------
#Swap memory must be turned off permanently (delete it from fstab file)
print_color "green" "Turning off SWAP for Kubernetes INIT"
sudo sed -i '/swap/d' /etc/fstab
sudo swapoff -a


#Set SELinux in permissive mode (effectively disabling it)
print_color "green" "Disabling SELinux and setting it in permissive mode.  - Required for Kubernetes INIT"
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

#Install and set firewall for control plane
print_color "green" "Installing and checking firewalld status - control plane node..."
sudo yum install -y firewalld 
sudo systemctl enable firewalld --now
check_service_status firewalld

#install wget
sudo dnf install wget -y

#Opening required ports for controlplane
print_color "green" "Opening required ports for controlplane"
firewall-cmd --permanent --add-port=10250/tcp
firewall-cmd --permanent --add-port=10255/tcp
firewall-cmd --permanent --add-port=8472/udp
firewall-cmd --permanent --add-port=30000-32767/tcp
firewall-cmd --permanent --add-port=179/tcp
firewall-cmd --permanent --add-port=53/udp
firewall-cmd --permanent --add-port=53/tcp
firewall-cmd --permanent --add-port=22/tcp
firewall-cmd --permanent --add-port=123/tcp
firewall-cmd --permanent --add-port=67-68/tcp
firewall-cmd --add-masquerade --permanent
systemctl restart firewalld


#---Setup IP forwarding and Overlay network model---
#---------------------------------------------------
#Activate ip forwarding and overlay network model
print_color "green" "Activating bridge network filter and overlay network model"
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
#Activating plugins
sudo modprobe overlay
sudo modprobe br_netfilter

#Making forwarding persistent across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
#Applying
sudo sysctl --system

#------------------------------Installing required packages-----------------------
#----------------------------------------------------------------------------------
print_color "green" "------------------Installing required packages-----------------------"
#Installing runc (choose a version on https://github.com/opencontainers/runc/releases)
sudo wget https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64
sudo install -m 755 runc.amd64 /usr/local/sbin/runc

#Install CNI plugins (choose a release version on https://github.com/containernetworking/plugins/releases)
sudo wget https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
sudo mkdir -p /opt/cni/bin
sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz

#Install required basic Linux packages (yum utils dev mapper and lvm2)
sudo dnf install -y  yum-utils device-mapper-persistent-data lvm2

#Installing, configuring and enabling Container Runtime (CRI) - Containerd.io
sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
sudo dnf update -y 
sudo dnf install -y containerd.io --allowerasing
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml
sudo systemctl enable containerd --now
sudo systemctl daemon-reload
check_service_status containerd

#accepting iptables forwarding/input/output and apply updated kube-dns
sudo iptables -P INPUT ACCEPT
sudo iptables -P FORWARD ACCEPT
sudo iptables -P OUTPUT ACCEPT
sudo iptables -F

#Setup kubernetes default folder
sudo cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

#Install Kubernetes (kubeadm, kubelet and kubectl)  -to improve with version variable
sudo dnf install -y $KUBEADM_VERSION $KUBELET_VERSION $KUBECTL_VERSION

#Install bash-completion
echo "Installing bash-completion tool"
sudo yum install -y bash-completion --disableexcludes=kubernetes

#Enable and start kubelet 
print_color "green" "Enabling KUBELET..."
echo 'KUBELET_EXTRA_ARGS="--fail-swap-on=false"' | sudo tee /etc/sysconfig/kubelet
sudo systemctl enable --now kubelet

#--------------------------Joining worker node to K8s cluster---------------------------------
#---------------------------------------------------------------------------------------------
#setup cGroup on ControlPlane and initialize kubeadm - will be good to give --ip-cidr-block parameter too
kubeadm join $JOIN_TOKEN

#Restart kubelet service on both control plane and worker
sudo systemctl restart kubelet
sudo systemctl daemon-reload

#Check kubelet status now on worker node (should be running)
sudo systemctl status kubelet

